blueprint:
  name: Simple Thermostat Control
  author: Colorful Cookie
  description: Simple thermostat control based on position and time.
  domain: automation
  input:
    thermostat:
      name: Thermostat
      description: This is the thermostats to be controlled.
      selector:
        entity:
          filter:
          - domain:
            - climate
          multiple: true
    schedule:
      name: Schedule
      description: Scheduler that specifies when the comfort temperature will be set.
      default:
      selector:
        entity:
          filter:
          - domain:
            - schedule
          multiple: false
    comfort_temperature:
      name: Comfort Temperature
      description: Input number helper to set the comfort temperature.
      default:
      selector:
        entity:
          filter:
          - domain:
            - input_number
          multiple: false
    away_temperature:
      name: Away Temperature
      description: Input number helper to set the away temperature.
      default:
      selector:
        entity:
          filter:
          - domain:
            - input_number
          multiple: false
    person:
      name: Person
      description: The is the persons who's location is going to be used for the control
      selector:
        entity:
          filter:
          - domain:
            - person
          multiple: true
    zone_occupied:
      name: Input Boolean Space Occupied
      description: An input boolean that changes its state based on the occupation
        of your home. Set this for rooms that are used by multiple people.
      default:
      selector:
        entity:
          filter:
          - domain:
            - input_boolean
          multiple: false
    zone:
      name: Zone
      description: This zone will be used together with the persons to decide weather
        a thermostat should be on or off.
      selector:
        entity:
          filter:
          - domain:
            - zone
          multiple: false
    on_off:
      name: On & Off boolean
      description: Input boolean for enabling/disabling ths automation.
      selector:
        entity:
          filter:
          - domain:
            - input_boolean
          multiple: false
trigger:
- platform: homeassistant
  event: start
  id: hat-start
- platform: event
  event_type: automation_reloaded
  id: automation-reloaded
- platform: state
  entity_id: !input schedule
  to: 'on'
  id: schedule-on
- platform: state
  entity_id: !input schedule
  to: 'off'
  id: schedule-off
- platform: zone
  entity_id: !input person
  zone: !input zone
  event: enter
  id: person-enter
- platform: zone
  entity_id: !input person
  zone: !input zone
  event: leave
  id: person-leave
- platform: state
  entity_id: !input on_off
  to: 'on'
  id: central-on
- platform: state
  entity_id: !input on_off
  to: 'off'
  id: central-off
- platform: state
  entity_id: !input comfort_temperature
  id: comfort-temperature-update
- platform: state
  entity_id: !input away_temperature
  id: away-temperature-update
variables:
  thermostat: !input thermostat
  schedule: !input schedule
  comfort_temperature: !input comfort_temperature
  away_temperature: !input away_temperature
  person: !input person
  zone_occupied: !input zone_occupied
  zone: !input zone
  on_off: !input on_off
  persons_in_zone: "{{state_attr(zone, 'persons')}}"
  zone_occupation: "
  {% if zone_occupied != 'none' and zone_occupied != none and zone_occupied != null and zone_occupied != 'null'%}
    {% set ns = namespace(tmp=false) %}
    {% for p in person %}
      {% if p in persons_in_zone %}
        {% set ns.tmp = true %}
      {% endif %}
    {% endfor %}
  {% else %}
    {% set ns = namespace(tmp=zone_occupied) %}
  {% endif %}
  {{ ns.tmp }}"
condition:
action:
- if:
  - condition: trigger
    id: hat-start
  then:
  - delay:
      seconds: 30
- variables:
    comfort_temperature: !input comfort_temperature
    away_temperature: !input away_temperature
- choose:
  - conditions:
    - condition: trigger
      id: central-off
    sequence:
    - service: climate.turn_off
      target:
        entity_id: !input thermostat
  - conditions:
    - condition: trigger
      id: schedule-on
    sequence:
    - if:
      - condition: template
        value_template: '{{ zone_occupation == ''off'' }}'
      then:
      - service: climate.set_temperature
        target:
          entity_id: !input thermostat
        data:
          temperature: '{{ states[away_temperature].state | float }}'
          hvac_mode: heat
    - if:
      - condition: template
        value_template: '{{ zone_occupation == ''on'' }}'
      then:
      - service: climate.set_temperature
        target:
          entity_id: !input thermostat
        data:
          temperature: '{{ states[comfort_temperature].state | float }}'
          hvac_mode: heat
  - conditions:
    - condition: trigger
      id: schedule-off
    sequence:
    - service: climate.turn_off
      target:
        entity_id: !input thermostat
  - conditions:
    - condition: trigger
      id: person-enter
    - condition: state
      entity_id: !input schedule
      state: 'on'
    sequence:
    - service: climate.set_temperature
      target:
        entity_id: !input thermostat
      data:
        temperature: '{{ states[comfort_temperature].state | float }}'
        hvac_mode: heat
  - conditions:
    - condition: trigger
      id: person-enter
    - condition: state
      entity_id: !input schedule
      state: 'off'
    sequence:
    - service: climate.turn_off
      target:
        entity_id: !input thermostat
  - conditions:
    - condition: trigger
      id: person-leave
    - condition: template
      value_template: '{{ zone_occupation == ''off'' }}'
    - condition: state
      entity_id: !input schedule
      state: 'on'
    sequence:
    - service: climate.set_temperature
      target:
        entity_id: !input thermostat
      data:
        temperature: '{{ states[away_temperature].state | float }}'
        hvac_mode: heat
  - conditions:
    - condition: trigger
      id: person-leave
    - condition: template
      value_template: '{{ zone_occupation == ''on'' }}'
    - condition: state
      entity_id: !input schedule
      state: 'on'
    sequence:
    - service: climate.set_temperature
      target:
        entity_id: !input thermostat
      data:
        temperature: '{{ states[comfort_temperature].state | float }}'
        hvac_mode: heat
  - conditions:
    - condition: trigger
      id: person-leave
    - condition: state
      entity_id: !input schedule
      state: 'off'
    sequence:
    - service: climate.turn_off
      target:
        entity_id: !input thermostat
  - conditions:
    - condition: trigger
      id: hat-start
    sequence:
    - delay:
        seconds: 30
    - service: automation.reload
  default:
  - if:
    - condition: state
      entity_id: !input schedule
      state: 'off'
    then:
    - service: climate.turn_off
      target:
        entity_id: !input thermostat
  - if:
    - condition: zone
      entity_id: !input person
      zone: !input zone
    - condition: state
      entity_id: !input schedule
      state: 'on'
    then:
    - service: climate.set_temperature
      target:
        entity_id: !input thermostat
      data:
        temperature: '{{ states[comfort_temperature].state | float }}'
        hvac_mode: heat
  - if:
    - condition: not
      conditions:
      - condition: zone
        entity_id: !input person
        zone: !input zone
    - condition: template
      value_template: '{{ zone_occupation == ''on'' }}'
    - condition: state
      entity_id: !input schedule
      state: 'on'
    then:
    - service: climate.set_temperature
      target:
        entity_id: !input thermostat
      data:
        temperature: '{{ states[comfort_temperature].state | float }}'
        hvac_mode: heat
  - if:
    - condition: not
      conditions:
      - condition: zone
        entity_id: !input person
        zone: !input zone
    - condition: template
      value_template: '{{ zone_occupation == ''off'' }}'
    - condition: state
      entity_id: !input schedule
      state: 'on'
    then:
    - service: climate.set_temperature
      target:
        entity_id: !input thermostat
      data:
        temperature: '{{ states[away_temperature].state | float }}'
        hvac_mode: heat
  - service: system_log.write
    data:
      level: debug
      logger: blueprints.colorfulcookie.simple-thermostat-control
      message: 'zone occupation: {{zone_occupation}}{{" \n "}}
      away temperature: {{ states[away_temperature].state | float }}{{" \n "}}
      comfort temperature: {{ states[comfort_temperature].state | float }}{{" \n "}}
      schedule: {{ states[schedule].state}}{{" \n "}}
      person: {{ person }}{{"\n"}}
      zone: {{ state_attr(zone, ''persons'') }}{{" \n "}}'
